{
  "name": "hartran-linkedin-article-corrige",
  "nodes": [
    {
      "parameters": {},
      "id": "trigger-manual",
      "name": "üöÄ D√©clencheur Manuel",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [256, 304]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "507bd4507b644b78b44d4ceeb809f1e0",
          "mode": "id"
        },
        "limit": 1,
        "filterType": "none",
        "options": {}
      },
      "id": "notion-get-ideas",
      "name": "üì• R√©cup√©rer Id√©e Non Trait√©e",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [480, 304],
      "credentials": {
        "notionApi": {
          "id": "aH0S5x4M973O80uj",
          "name": "Notion LinkedIn"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Filtrer pour ne garder que les id√©es non trait√©es\nconst items = $input.all();\n\n// Filtrer les id√©es o√π la case \"Trait√©\" n'est PAS coch√©e\nconst id√©esNonTrait√©es = items.filter(item => {\n  const trait√© = item.json?.properties?.['Trait√©']?.checkbox;\n  // Si la propri√©t√© n'existe pas ou est false, on garde l'id√©e\n  return !trait√© || trait√© === false;\n});\n\nconsole.log(`Nombre total d'id√©es: ${items.length}`);\nconsole.log(`Nombre d'id√©es non trait√©es: ${id√©esNonTrait√©es.length}`);\n\n// Retourner uniquement les id√©es non trait√©es\nreturn id√©esNonTrait√©es;"
      },
      "id": "filter-non-treated",
      "name": "üîç Filtrer id√©es non trait√©es",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [560, 304]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-ideas",
              "leftValue": "={{ $input.all().length > 0 }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-ideas-exist",
      "name": "üîç V√©rifier id√©es disponibles",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [720, 304]
    },
    {
      "parameters": {
        "error": false,
        "message": "=Aucune id√©e non trait√©e trouv√©e dans la base Notion. \n\nPour utiliser ce workflow :\n1. Cr√©ez une nouvelle id√©e dans votre base \"Banque d'id√©es - Articles IA\"\n2. Assurez-vous que la case \"Trait√©\" n'est PAS coch√©e\n3. Relancez le workflow",
        "options": {}
      },
      "id": "stop-no-ideas",
      "name": "üõë Aucune id√©e √† traiter",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [720, 480]
    },
    {
      "parameters": {
        "jsCode": "// Pr√©parer et d√©boguer les donn√©es de l'id√©e Notion\nconst notionItem = $json;\n\nconsole.log('=== DONN√âES RE√áUES DE NOTION ===');\nconsole.log(JSON.stringify(notionItem, null, 2));\n\n// Extraire les donn√©es importantes\nlet titre = 'Article sur la web analyse et data';\nlet sources = '';\nlet notes = '';\nlet angle = '';\nlet questions = '';\nlet pourquoi = '';\nlet stats = '';\nlet citations = '';\n\n// Essayer diff√©rentes fa√ßons d'acc√©der aux propri√©t√©s\nif (notionItem?.properties) {\n  // Titre\n  titre = notionItem.properties?.title?.[0]?.plain_text || \n          notionItem.properties?.['Titre/Id√©e principale']?.title?.[0]?.plain_text ||\n          notionItem.properties?.Name?.title?.[0]?.plain_text ||\n          'Article sur la web analyse et data';\n  \n  // Sources\n  sources = notionItem.properties?.['Sources/URLs']?.rich_text?.[0]?.plain_text || '';\n  \n  // Notes personnelles\n  notes = notionItem.properties?.['Notes personnelles']?.rich_text?.[0]?.plain_text || '';\n  \n  // Angle personnel\n  angle = notionItem.properties?.['Angle personnel']?.rich_text?.[0]?.plain_text || '';\n  \n  // Questions\n  questions = notionItem.properties?.['Questions √† adresser']?.rich_text?.[0]?.plain_text || '';\n  \n  // Pourquoi maintenant\n  pourquoi = notionItem.properties?.['Pourquoi maintenant?']?.rich_text?.[0]?.plain_text || '';\n  \n  // Statistiques\n  stats = notionItem.properties?.['Data/Statistiques']?.rich_text?.[0]?.plain_text || '';\n  \n  // Citations\n  citations = notionItem.properties?.['Citations cl√©s']?.rich_text?.[0]?.plain_text || '';\n}\n\nconsole.log('=== DONN√âES EXTRAITES ===');\nconsole.log('Titre:', titre);\nconsole.log('Sources:', sources);\nconsole.log('Notes:', notes);\nconsole.log('Angle:', angle);\nconsole.log('Questions:', questions);\n\n// Retourner toutes les donn√©es + les donn√©es format√©es\nreturn {\n  ...notionItem,\n  extracted: {\n    titre,\n    sources,\n    notes,\n    angle,\n    questions,\n    pourquoi,\n    stats,\n    citations\n  }\n};"
      },
      "id": "prepare-notion-data",
      "name": "üîç Pr√©parer donn√©es id√©e",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 304]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Effectue une recherche approfondie sur le sujet suivant pour un article LinkedIn professionnel:\n\nTitre: {{ $json.extracted?.titre || 'Article sur la web analyse et data' }}\n\nContexte et sources: {{ $json.extracted?.sources || 'Non fourni' }}\n\nNotes personnelles: {{ $json.extracted?.notes || 'Expert en web analyse et data analyse' }}\n\nAngle personnel: {{ $json.extracted?.angle || '' }}\n\nQuestions √† adresser: {{ $json.extracted?.questions || '' }}\n\nPourquoi maintenant: {{ $json.extracted?.pourquoi || '' }}\n\nData/Statistiques: {{ $json.extracted?.stats || '' }}\n\nCitations cl√©s: {{ $json.extracted?.citations || '' }}\n\nIMPORTANT: Le sujet est R√âEL et concret. Effectue une recherche approfondie sur ce sujet pr√©cis. Ne dis pas qu'il manque des informations.\n\nRecherche les derni√®res actualit√©s, statistiques, √©tudes de cas, et innovations sur ce sujet. Fournis des donn√©es concr√®tes et v√©rifiables.",
        "options": {
          "systemMessage": "Tu es un expert en recherche d'informations sur les sujets de web analyse et data analyse. Tu dois effectuer une recherche approfondie et fournir des informations actuelles, des statistiques, des tendances et des exemples concrets. Utilise tes capacit√©s de recherche web pour trouver les informations les plus r√©centes et pertinentes."
        }
      },
      "id": "perplexity-agent",
      "name": "üîç Agent Recherche Perplexity",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [840, 400]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=R√©dige un article LinkedIn professionnel de 800-1200 mots bas√© sur les informations suivantes:\n\nSujet principal: {{ $('üîç Pr√©parer donn√©es id√©e').first().json.extracted?.titre || 'Article sur la web analyse et data' }}\n\nNotes personnelles: {{ $('üîç Pr√©parer donn√©es id√©e').first().json.extracted?.notes || '' }}\n\nAngle personnel: {{ $('üîç Pr√©parer donn√©es id√©e').first().json.extracted?.angle || '' }}\n\nQuestions √† adresser: {{ $('üîç Pr√©parer donn√©es id√©e').first().json.extracted?.questions || '' }}\n\nPourquoi maintenant: {{ $('üîç Pr√©parer donn√©es id√©e').first().json.extracted?.pourquoi || '' }}\n\nData/Statistiques √† int√©grer: {{ $('üîç Pr√©parer donn√©es id√©e').first().json.extracted?.stats || '' }}\n\nCitations cl√©s: {{ $('üîç Pr√©parer donn√©es id√©e').first().json.extracted?.citations || '' }}\n\nRecherche effectu√©e:\n{{ $json.output }}\n\nIMPORTANT: Tu DOIS r√©diger un article complet sur le sujet donn√©. Ne dis JAMAIS qu'il manque des informations. Utilise toutes les donn√©es fournies pour cr√©er un article pertinent et engageant.\n\nConsignes:\n- Article de 800-1200 mots COMPLET (pas de message d'erreur)\n- Structure avec une accroche forte sur le sujet donn√©\n- D√©veloppement avec exemples concrets tir√©s de la recherche\n- Insights pratiques et actionnables\n- Conclusion avec appel √† l'action\n- Ton professionnel mais accessible\n- Int√®gre TOUS les √©l√©ments fournis (angle personnel, questions, statistiques, citations)\n- Le sujet est TOUJOURS li√© √† la web analyse, data analyse ou l'IA\n\nNE JAMAIS r√©pondre qu'il manque des informations. TOUJOURS cr√©er un article complet.",
        "options": {
          "systemMessage": "Tu es un expert en r√©daction d'articles LinkedIn professionnels sur des sujets de web analyse et data analyse. Tu r√©diges des articles engageants avec une structure claire et des insights pratiques. Tu adaptes ton angle √©ditorial en fonction des notes personnelles et questions fournies."
        }
      },
      "id": "claude-agent",
      "name": "‚úçÔ∏è Agent R√©daction Claude",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [1056, 400]
    },
    {
      "parameters": {
        "model": "claude-3-opus-20240229",
        "options": {}
      },
      "id": "claude-model",
      "name": "Claude Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [992, 608],
      "credentials": {
        "anthropicApi": {
          "id": "Ylmsz8Ymq9adIJs0",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=G√©n√®re exactement 10 hashtags pertinents pour cet article LinkedIn:\n\n{{ $json.output }}\n\nRetourne uniquement les hashtags s√©par√©s par des espaces, sans num√©rotation ni autre texte. M√©lange hashtags populaires et sp√©cialis√©s dans le domaine de l'analytics et du data.",
        "options": {
          "systemMessage": "Tu es un expert en marketing LinkedIn. Tu g√©n√®res des hashtags optimis√©s pour maximiser la visibilit√© des articles."
        }
      },
      "id": "openai-agent",
      "name": "üè∑Ô∏è Agent Hashtags GPT",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [1408, 400]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {}
      },
      "id": "openai-model",
      "name": "OpenAI Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [1480, 624],
      "credentials": {
        "openAiApi": {
          "id": "W3z11iU8VRrweFEt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tu es un expert en copywriting LinkedIn. Transforme cet article en un post LinkedIn percutant de 300-500 mots.\n\nArticle complet :\n{{ $('‚úçÔ∏è Agent R√©daction Claude').first().json.output }}\n\nHashtags √† int√©grer :\n{{ $('üè∑Ô∏è Agent Hashtags GPT').first().json.output }}\n\nConsignes :\n- Accroche forte d√®s la premi√®re ligne (sans le titre de l'article)\n- Structure a√©r√©e avec sauts de ligne\n- Points cl√©s avec emojis appropri√©s\n- Statistiques percutantes mises en avant\n- Appel √† l'action clair et engageant\n- Style direct et conversationnel\n- √âviter le jargon technique complexe\n- Cr√©er de l'√©motion et de l'engagement\n\nFormat attendu :\n[Emoji percutant] [Accroche qui donne envie de lire la suite]\n\n[Contexte en 2-3 lignes maximum]\n\n[3-5 points cl√©s avec emojis]\n\n[Statistique ou exemple concret]\n\n[Question ou appel √† l'action]\n\n[Ligne vide]\n\n[Tous les hashtags]",
        "options": {
          "systemMessage": "Tu es un expert en copywriting et marketing LinkedIn. Tu transformes des articles longs en posts LinkedIn engageants et viraux. Tu ma√Ætrises l'art de l'accroche, du storytelling court et de l'appel √† l'action. Ton style est professionnel mais accessible, avec une touche d'√©motion pour cr√©er de l'engagement."
        }
      },
      "id": "linkedin-synthesis",
      "name": "üì± Synth√®se LinkedIn Claude",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [1580, 400]
    },
    {
      "parameters": {
        "model": "anthropic/claude-3.5-sonnet",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [1580, 576],
      "id": "linkedin-claude-model",
      "name": "Claude LinkedIn Model",
      "credentials": {
        "openRouterApi": {
          "id": "xLdMbYh4lyLsgJJA",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Pr√©paration des donn√©es pour la sauvegarde Notion - VERSION 7\n\n// R√©cup√©rer les donn√©es du n≈ìud Notion\nconst notionItem = $('üì• R√©cup√©rer Id√©e Non Trait√©e').first().json;\n\n// R√©cup√©rer l'ID de l'id√©e\nconst ideaId = notionItem?.id || \"\";\n\n// R√©cup√©rer le contenu COMPLET de l'article depuis Claude\nlet contenuArticleComplet = \"\";\ntry {\n  contenuArticleComplet = $('‚úçÔ∏è Agent R√©daction Claude').first().json.output || \"\";\n} catch (e) {\n  console.log(\"Erreur lors de la r√©cup√©ration du contenu Claude:\", e.message);\n}\n\n// Extraire le titre depuis le contenu - chercher apr√®s \"Titre:\"\nlet titreFinal = \"Sans titre\";\nconst matchTitre = contenuArticleComplet.match(/Titre\\s*:\\s*(.+)/i);\nif (matchTitre && matchTitre[1]) {\n  titreFinal = matchTitre[1].trim();\n  console.log(\"Titre extrait avec regex:\", titreFinal);\n} else {\n  // Si pas trouv√©, prendre la premi√®re ligne non vide\n  const lignes = contenuArticleComplet.split('\\n').filter(l => l.trim());\n  if (lignes.length > 0 && lignes[0].length > 10 && lignes[0].length < 200) {\n    titreFinal = lignes[0].trim();\n    console.log(\"Titre pris depuis premi√®re ligne:\", titreFinal);\n  }\n}\n\n// R√©cup√©rer les hashtags depuis GPT\nlet hashtags = \"\";\ntry {\n  hashtags = $('üè∑Ô∏è Agent Hashtags GPT').first().json.output || \"\";\n} catch (e) {\n  console.log(\"Erreur lors de la r√©cup√©ration des hashtags:\", e.message);\n}\n\n// R√©cup√©rer le post LinkedIn synth√©tis√©\nlet postLinkedInSynthetise = \"\";\ntry {\n  postLinkedInSynthetise = $('üì± Synth√®se LinkedIn Claude').first().json.output || \"\";\n  console.log(\"Post LinkedIn synth√©tis√© r√©cup√©r√©\");\n} catch (e) {\n  console.log(\"Erreur lors de la r√©cup√©ration du post LinkedIn:\", e.message);\n  // Fallback\n  const emojis = [\"üöÄ\", \"üìä\", \"üí°\", \"üéØ\", \"‚ú®\"];\n  const emoji = emojis[Math.floor(Math.random() * emojis.length)];\n  postLinkedInSynthetise = `${emoji} ${contenuArticleComplet.substring(0, 400)}...\\n\\n${hashtags}`;\n}\n\n// Extraction des statistiques cl√©s\nconst stats = contenuArticleComplet.match(/\\d+[%‚Ç¨$]?|\\d+\\s*(millions?|milliards?|%)/gi) || [];\nconst statistiquesCles = stats.join(', ');\n\n// IMPORTANT : Pour la propri√©t√© \"Contenu article\"\n// On va essayer une approche intelligente\nlet contenuPourPropriete = \"\";\n\n// Si l'article fait moins de 2000 caract√®res, on le met en entier\nif (contenuArticleComplet.length <= 2000) {\n  contenuPourPropriete = contenuArticleComplet;\n  console.log(\"Article complet tient dans la propri√©t√©\");\n} else {\n  // Sinon, on cr√©e un r√©sum√© intelligent\n  // Option 1 : Prendre le d√©but jusqu'√† une fin de phrase\n  let cutIndex = 1950; // Un peu moins que 2000 pour la marge\n  \n  // Chercher la fin de phrase la plus proche avant 1950\n  const finsDePhrases = ['. ', '! ', '? ', '\\n\\n'];\n  for (const fin of finsDePhrases) {\n    const lastIndex = contenuArticleComplet.lastIndexOf(fin, cutIndex);\n    if (lastIndex > 1500) { // Au moins 1500 caract√®res\n      cutIndex = lastIndex + fin.length - 1;\n      break;\n    }\n  }\n  \n  contenuPourPropriete = contenuArticleComplet.substring(0, cutIndex).trim();\n  \n  // Ajouter une indication discr√®te\n  if (!contenuPourPropriete.endsWith('.') && !contenuPourPropriete.endsWith('!') && !contenuPourPropriete.endsWith('?')) {\n    contenuPourPropriete += '...';\n  }\n  \n  console.log(`Article r√©sum√© intelligemment : ${cutIndex} caract√®res sur ${contenuArticleComplet.length}`);\n}\n\n// Pour le post LinkedIn, m√™me logique\nlet postLinkedInPourPropriete = postLinkedInSynthetise;\nif (postLinkedInSynthetise.length > 2000) {\n  // Le post synth√©tis√© ne devrait pas d√©passer 500 mots donc ~3000 caract√®res max\n  // Mais au cas o√π, on coupe intelligemment\n  let cutIndex = 1950;\n  const finsDePhrases = ['. ', '! ', '? ', '\\n\\n'];\n  for (const fin of finsDePhrases) {\n    const lastIndex = postLinkedInSynthetise.lastIndexOf(fin, cutIndex);\n    if (lastIndex > 1500) {\n      cutIndex = lastIndex + fin.length - 1;\n      break;\n    }\n  }\n  postLinkedInPourPropriete = postLinkedInSynthetise.substring(0, cutIndex).trim();\n}\n\n// Log pour d√©bogage\nconsole.log(\"=== DONN√âES PR√âPAR√âES V7 ===\");\nconsole.log(\"- Titre final:\", titreFinal);\nconsole.log(\"- Longueur article complet:\", contenuArticleComplet.length);\nconsole.log(\"- Longueur contenu propri√©t√©:\", contenuPourPropriete.length);\nconsole.log(\"- Longueur post LinkedIn:\", postLinkedInSynthetise.length);\nconsole.log(\"- Article tronqu√© ?\", contenuArticleComplet.length > 2000 ? \"Oui (limite Notion)\" : \"Non\");\n\n// Retourner toutes les donn√©es\nreturn {\n  // Donn√©es pour les propri√©t√©s\n  titre: titreFinal,\n  contenuArticle: contenuPourPropriete,\n  hashtags: hashtags,\n  postLinkedInComplet: postLinkedInPourPropriete,\n  statistiquesCles: statistiquesCles.substring(0, 2000),\n  \n  // Donn√©es compl√®tes pour le corps de la page\n  contenuArticleComplet: contenuArticleComplet,\n  postLinkedInCompletTotal: postLinkedInSynthetise,\n  \n  // M√©tadonn√©es\n  ideaId: ideaId,\n  dateGeneration: new Date().toISOString(),\n  longueurArticle: contenuArticleComplet.length,\n  nombreMots: contenuArticleComplet.split(/\\s+/).length,\n  articleTronque: contenuArticleComplet.length > 2000\n};"
      },
      "id": "prepare-data",
      "name": "üìã Pr√©parer donn√©es finales",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1760, 400]
    },
    {
      "parameters": {
        "jsCode": "// Pr√©paration du JSON pour l'API Notion - VERSION 8\n\n// Fonction pour diviser intelligemment un texte long en blocs de max 2000 caract√®res\nfunction diviserTexteEnBlocs(texte, maxLength = 1950) {\n  if (texte.length <= maxLength) {\n    return [texte];\n  }\n  \n  const blocs = [];\n  let restant = texte;\n  \n  while (restant.length > 0) {\n    if (restant.length <= maxLength) {\n      blocs.push(restant);\n      break;\n    }\n    \n    // Chercher un point de coupure naturel (fin de phrase)\n    let cutIndex = maxLength;\n    const finsDePhrases = ['. ', '! ', '? ', '.\\n', '!\\n', '?\\n'];\n    \n    for (const fin of finsDePhrases) {\n      const lastIndex = restant.lastIndexOf(fin, maxLength);\n      if (lastIndex > maxLength * 0.7) { // Au moins 70% du max\n        cutIndex = lastIndex + fin.length - 1;\n        break;\n      }\n    }\n    \n    // Si pas de fin de phrase, chercher un espace\n    if (cutIndex === maxLength) {\n      const lastSpace = restant.lastIndexOf(' ', maxLength);\n      if (lastSpace > maxLength * 0.7) {\n        cutIndex = lastSpace;\n      }\n    }\n    \n    blocs.push(restant.substring(0, cutIndex).trim());\n    restant = restant.substring(cutIndex).trim();\n  }\n  \n  return blocs;\n}\n\nconst notionPayload = {\n  parent: {\n    database_id: \"9b915f4f6bae479f9326ff2cfdabadd3\"\n  },\n  properties: {\n    \"Titre\": {\n      title: [\n        {\n          text: {\n            content: $json.titre || \"Sans titre\"\n          }\n        }\n      ]\n    },\n    \"Contenu article\": {\n      rich_text: [\n        {\n          text: {\n            content: $json.contenuArticle || \"\"\n          }\n        }\n      ]\n    },\n    \"Hashtags\": {\n      rich_text: [\n        {\n          text: {\n            content: $json.hashtags || \"\"\n          }\n        }\n      ]\n    },\n    \"Post LinkedIn complet\": {\n      rich_text: [\n        {\n          text: {\n            content: $json.postLinkedInComplet || \"\"\n          }\n        }\n      ]\n    },\n    \"Public cible\": {\n      select: {\n        name: \"Professionnels et d√©cideurs\"\n      }\n    },\n    \"Statistiques cl√©s\": {\n      rich_text: [\n        {\n          text: {\n            content: $json.statistiquesCles || \"\"\n          }\n        }\n      ]\n    }\n  },\n  // Ajouter le contenu complet dans le corps de la page\n  children: [\n    {\n      object: \"block\",\n      type: \"heading_1\",\n      heading_1: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: $json.titre || \"Article LinkedIn\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      object: \"block\",\n      type: \"divider\",\n      divider: {}\n    },\n    {\n      object: \"block\",\n      type: \"heading_2\",\n      heading_2: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: \"üìÑ Article complet\"\n            }\n          }\n        ]\n      }\n    },\n    // Diviser l'article en paragraphes puis en blocs si n√©cessaire\n    ...(($json.contenuArticleComplet || \"\").split('\\\\n\\\\n')\n      .filter(p => p.trim())\n      .flatMap(paragraphe => {\n        // Si le paragraphe est trop long, le diviser en plusieurs blocs\n        const blocs = diviserTexteEnBlocs(paragraphe, 1950);\n        return blocs.map(bloc => ({\n          object: \"block\",\n          type: \"paragraph\",\n          paragraph: {\n            rich_text: [\n              {\n                type: \"text\",\n                text: {\n                  content: bloc\n                }\n              }\n            ]\n          }\n        }));\n      })),\n    {\n      object: \"block\",\n      type: \"divider\",\n      divider: {}\n    },\n    {\n      object: \"block\",\n      type: \"heading_2\",\n      heading_2: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: \"üöÄ Post LinkedIn pr√™t √† publier\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      object: \"block\",\n      type: \"callout\",\n      callout: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              // Le post LinkedIn aussi peut √™tre long, on le divise si n√©cessaire\n              content: diviserTexteEnBlocs($json.postLinkedInCompletTotal || \"\", 1950)[0]\n            }\n          }\n        ],\n        icon: {\n          type: \"emoji\",\n          emoji: \"üì±\"\n        },\n        color: \"blue_background\"\n      }\n    },\n    // Si le post LinkedIn est trop long pour un seul callout, ajouter la suite\n    ...(diviserTexteEnBlocs($json.postLinkedInCompletTotal || \"\", 1950).slice(1).map(bloc => ({\n      object: \"block\",\n      type: \"paragraph\",\n      paragraph: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: bloc\n            }\n          }\n        ]\n      }\n    }))),\n    {\n      object: \"block\",\n      type: \"divider\",\n      divider: {}\n    },\n    {\n      object: \"block\",\n      type: \"heading_3\",\n      heading_3: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: \"üìä M√©tadonn√©es\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      object: \"block\",\n      type: \"bulleted_list_item\",\n      bulleted_list_item: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: `G√©n√©r√© le : ${new Date($json.dateGeneration).toLocaleString('fr-FR')}`\n            }\n          }\n        ]\n      }\n    },\n    {\n      object: \"block\",\n      type: \"bulleted_list_item\",\n      bulleted_list_item: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: `Longueur : ${$json.nombreMots || 0} mots (${$json.longueurArticle || 0} caract√®res)`\n            }\n          }\n        ]\n      }\n    },\n    {\n      object: \"block\",\n      type: \"bulleted_list_item\",\n      bulleted_list_item: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: `ID de l'id√©e source : ${$json.ideaId}`\n            }\n          }\n        ]\n      }\n    },\n    {\n      object: \"block\",\n      type: \"bulleted_list_item\",\n      bulleted_list_item: {\n        rich_text: [\n          {\n            type: \"text\",\n            text: {\n              content: `Article tronqu√© dans les propri√©t√©s : ${$json.articleTronque ? \"Oui (limite API 2000 car)\" : \"Non\"}`\n            }\n          }\n        ]\n      }\n    }\n  ]\n};\n\n// Log pour debug\nconsole.log(\"=== PAYLOAD NOTION V8 ===\");\nconsole.log(\"- Nombre de propri√©t√©s:\", Object.keys(notionPayload.properties).length);\nconsole.log(\"- Nombre de blocs children:\", notionPayload.children.length);\n\n// V√©rifier si des paragraphes ont √©t√© divis√©s\nconst articleComplet = $json.contenuArticleComplet || \"\";\nconst paragraphesOriginaux = articleComplet.split('\\\\n\\\\n').filter(p => p.trim()).length;\nconst blocsFinaux = notionPayload.children.filter(b => b.type === 'paragraph').length;\nconsole.log(`- Paragraphes originaux: ${paragraphesOriginaux}`);\nconsole.log(`- Blocs paragraph finaux: ${blocsFinaux}`);\nif (blocsFinaux > paragraphesOriginaux) {\n  console.log(`  ‚Üí ${blocsFinaux - paragraphesOriginaux} paragraphes ont √©t√© divis√©s car trop longs`);\n}\n\n// Retourner le payload avec toutes les autres donn√©es\nreturn {\n  ...($json || {}),\n  notionPayload: notionPayload\n};"
      },
      "id": "prepare-notion-payload",
      "name": "üîß Pr√©parer payload Notion",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1900, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/pages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.notionPayload }}",
        "options": {}
      },
      "id": "notion-create-article",
      "name": "üíæ Cr√©er Article dans Notion",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2100, 400],
      "credentials": {
        "notionApi": {
          "id": "aH0S5x4M973O80uj",
          "name": "Notion LinkedIn"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extraction des donn√©es de l'article cr√©√©\nreturn {\n  articleId: $json.id,\n  articleUrl: $json.url,\n  createdTime: $json.created_time,\n  titre: $json.properties?.Titre?.title?.[0]?.text?.content || \"Sans titre\",\n  ideaId: $('üìã Pr√©parer donn√©es finales').first().json.ideaId\n};"
      },
      "id": "extract-article-data",
      "name": "üìä Extraire donn√©es article",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2272, 400]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ `https://api.notion.com/v1/pages/${$('üì• R√©cup√©rer Id√©e Non Trait√©e').first().json.id}` }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"properties\": {\n    \"Trait√©\": {\n      \"checkbox\": true\n    }\n  }\n}",
        "options": {}
      },
      "id": "notion-update-idea",
      "name": "‚úÖ Marquer Id√©e Trait√©e",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2528, 400],
      "credentials": {
        "notionApi": {
          "id": "aH0S5x4M973O80uj",
          "name": "Notion LinkedIn"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "message",
              "value": "=‚úÖ Article LinkedIn g√©n√©r√© avec succ√®s!\n\nüìù Titre: {{ $('üìä Extraire donn√©es article').first().json.titre }}\nüìÑ Article ID: {{ $('üìä Extraire donn√©es article').first().json.articleId }}\nüîó URL Notion: {{ $('üìä Extraire donn√©es article').first().json.articleUrl }}\n‚è∞ Cr√©√© le: {{ $('üìä Extraire donn√©es article').first().json.createdTime }}\n\n‚úîÔ∏è L'id√©e a √©t√© marqu√©e comme trait√©e."
            }
          ]
        },
        "options": {}
      },
      "id": "success-message",
      "name": "‚ú® Message de succ√®s",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [2784, 400]
    },
    {
      "parameters": {
        "model": "perplexity/sonar-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [640, 576],
      "id": "8455064c-cbd7-4f0d-8da7-284d0cd6b3ed",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "xLdMbYh4lyLsgJJA",
          "name": "OpenRouter account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "üöÄ D√©clencheur Manuel": {
      "main": [
        [
          {
            "node": "üì• R√©cup√©rer Id√©e Non Trait√©e",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì• R√©cup√©rer Id√©e Non Trait√©e": {
      "main": [
        [
          {
            "node": "üîç Filtrer id√©es non trait√©es",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Filtrer id√©es non trait√©es": {
      "main": [
        [
          {
            "node": "üîç V√©rifier id√©es disponibles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç V√©rifier id√©es disponibles": {
      "main": [
        [
          {
            "node": "üîç Pr√©parer donn√©es id√©e",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üõë Aucune id√©e √† traiter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Pr√©parer donn√©es id√©e": {
      "main": [
        [
          {
            "node": "üîç Agent Recherche Perplexity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Agent Recherche Perplexity": {
      "main": [
        [
          {
            "node": "‚úçÔ∏è Agent R√©daction Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úçÔ∏è Agent R√©daction Claude": {
      "main": [
        [
          {
            "node": "üè∑Ô∏è Agent Hashtags GPT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude Model": {
      "ai_languageModel": [
        [
          {
            "node": "‚úçÔ∏è Agent R√©daction Claude",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "üè∑Ô∏è Agent Hashtags GPT": {
      "main": [
        [
          {
            "node": "üì± Synth√®se LinkedIn Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì± Synth√®se LinkedIn Claude": {
      "main": [
        [
          {
            "node": "üìã Pr√©parer donn√©es finales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Pr√©parer donn√©es finales": {
      "main": [
        [
          {
            "node": "üîß Pr√©parer payload Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîß Pr√©parer payload Notion": {
      "main": [
        [
          {
            "node": "üíæ Cr√©er Article dans Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Cr√©er Article dans Notion": {
      "main": [
        [
          {
            "node": "üìä Extraire donn√©es article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Extraire donn√©es article": {
      "main": [
        [
          {
            "node": "‚úÖ Marquer Id√©e Trait√©e",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Marquer Id√©e Trait√©e": {
      "main": [
        [
          {
            "node": "‚ú® Message de succ√®s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "üè∑Ô∏è Agent Hashtags GPT",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "üîç Agent Recherche Perplexity",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Claude LinkedIn Model": {
      "ai_languageModel": [
        [
          {
            "node": "üì± Synth√®se LinkedIn Claude",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "corrige-v1",
  "meta": {
    "instanceId": "403566a9aee191faa03a05967266a85d00d44980ffb18ca114571275711151b4"
  },
  "id": "8fRjPcH3dc54VPPX",
  "tags": []
}
