{
  "name": "Diagnostic - Récupérer Propriétés Notion",
  "nodes": [
    {
      "parameters": {},
      "id": "trigger-manual",
      "name": "🚀 Déclencheur Manuel",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.notion.com/v1/databases/507bd4507b644b78b44d4ceeb809f1e0",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "options": {}
      },
      "id": "get-ideas-schema",
      "name": "📥 Schéma Base Idées",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 200]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.notion.com/v1/databases/9b915f4f6bae479f9326ff2cfdabadd3",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "options": {}
      },
      "id": "get-articles-schema",
      "name": "📝 Schéma Base Articles",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 400]
    },
    {
      "parameters": {
        "functionCode": "// Extraire les propriétés de la base Idées\nconst properties = items[0].json.properties;\nconst title = items[0].json.title?.[0]?.plain_text || 'Base Idées';\n\nconst formattedProperties = [];\n\nfor (const [key, value] of Object.entries(properties)) {\n  formattedProperties.push({\n    nom: key,\n    type: value.type,\n    id: value.id,\n    configuration: JSON.stringify(value[value.type] || {}, null, 2)\n  });\n}\n\nreturn [{\n  json: {\n    database_name: title,\n    database_id: items[0].json.id,\n    properties_count: formattedProperties.length,\n    properties: formattedProperties,\n    raw_properties: properties\n  }\n}];"
      },
      "id": "format-ideas-properties",
      "name": "🔧 Formater Propriétés Idées",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 200]
    },
    {
      "parameters": {
        "functionCode": "// Extraire les propriétés de la base Articles\nconst properties = items[0].json.properties;\nconst title = items[0].json.title?.[0]?.plain_text || 'Base Articles LinkedIn';\n\nconst formattedProperties = [];\n\nfor (const [key, value] of Object.entries(properties)) {\n  formattedProperties.push({\n    nom: key,\n    type: value.type,\n    id: value.id,\n    configuration: JSON.stringify(value[value.type] || {}, null, 2)\n  });\n}\n\nreturn [{\n  json: {\n    database_name: title,\n    database_id: items[0].json.id,\n    properties_count: formattedProperties.length,\n    properties: formattedProperties,\n    raw_properties: properties\n  }\n}];"
      },
      "id": "format-articles-properties",
      "name": "🔧 Formater Propriétés Articles",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 400]
    },
    {
      "parameters": {
        "functionCode": "// Combiner les résultats des deux bases\nconst ideasData = $('🔧 Formater Propriétés Idées').item.json;\nconst articlesData = $('🔧 Formater Propriétés Articles').item.json;\n\nconsole.log('\\n========================================');\nconsole.log('📊 RAPPORT COMPLET DES PROPRIÉTÉS NOTION');\nconsole.log('========================================\\n');\n\nconsole.log('📥 BASE \"IDÉES D\\'ARTICLES\"');\nconsole.log('ID:', ideasData.database_id);\nconsole.log('Nombre de propriétés:', ideasData.properties_count);\nconsole.log('\\nPropriétés:');\nconsole.log('----------------------------------------');\nideasData.properties.forEach(prop => {\n  console.log(`\\n✓ ${prop.nom}`);\n  console.log(`  Type: ${prop.type}`);\n  console.log(`  ID: ${prop.id}`);\n  if (prop.type === 'select' || prop.type === 'multi_select') {\n    console.log(`  Options: ${prop.configuration}`);\n  }\n});\n\nconsole.log('\\n\\n📝 BASE \"ARTICLES LINKEDIN GÉNÉRÉS\"');\nconsole.log('ID:', articlesData.database_id);\nconsole.log('Nombre de propriétés:', articlesData.properties_count);\nconsole.log('\\nPropriétés:');\nconsole.log('----------------------------------------');\narticlesData.properties.forEach(prop => {\n  console.log(`\\n✓ ${prop.nom}`);\n  console.log(`  Type: ${prop.type}`);\n  console.log(`  ID: ${prop.id}`);\n  if (prop.type === 'select' || prop.type === 'multi_select') {\n    console.log(`  Options: ${prop.configuration}`);\n  }\n});\n\nconsole.log('\\n========================================\\n');\n\n// Créer un rapport formaté\nconst rapport = {\n  timestamp: new Date().toISOString(),\n  bases_de_donnees: {\n    idees: {\n      nom: ideasData.database_name,\n      id: ideasData.database_id,\n      nombre_proprietes: ideasData.properties_count,\n      proprietes: ideasData.properties\n    },\n    articles: {\n      nom: articlesData.database_name,\n      id: articlesData.database_id,\n      nombre_proprietes: articlesData.properties_count,\n      proprietes: articlesData.properties\n    }\n  },\n  mapping_workflow: {\n    idees_requises: [\n      'Titre/Idée principale',\n      'Sources/URLs',\n      'Notes personnelles',\n      'Angle personnel',\n      'Questions à adresser',\n      'Traité'\n    ],\n    articles_requises: [\n      'Titre',\n      'Contenu article',\n      'Hashtags',\n      'Post LinkedIn complet',\n      'Public cible',\n      'Statistiques clés'\n    ]\n  }\n};\n\nreturn [{\n  json: rapport\n}];"
      },
      "id": "combine-results",
      "name": "📊 Rapport Complet",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "message",
              "name": "message",
              "value": "=✅ Diagnostic terminé!\n\n📥 Base Idées: {{ $json.bases_de_donnees.idees.nombre_proprietes }} propriétés trouvées\n📝 Base Articles: {{ $json.bases_de_donnees.articles.nombre_proprietes }} propriétés trouvées\n\n⚠️ Vérifiez la console pour le rapport détaillé",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "success",
      "name": "✨ Succès",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [1050, 300]
    }
  ],
  "connections": {
    "🚀 Déclencheur Manuel": {
      "main": [[
        {"node": "📥 Schéma Base Idées", "type": "main", "index": 0},
        {"node": "📝 Schéma Base Articles", "type": "main", "index": 0}
      ]]
    },
    "📥 Schéma Base Idées": {
      "main": [[{"node": "🔧 Formater Propriétés Idées", "type": "main", "index": 0}]]
    },
    "📝 Schéma Base Articles": {
      "main": [[{"node": "🔧 Formater Propriétés Articles", "type": "main", "index": 0}]]
    },
    "🔧 Formater Propriétés Idées": {
      "main": [[{"node": "📊 Rapport Complet", "type": "main", "index": 0}]]
    },
    "🔧 Formater Propriétés Articles": {
      "main": [[{"node": "📊 Rapport Complet", "type": "main", "index": 0}]]
    },
    "📊 Rapport Complet": {
      "main": [[{"node": "✨ Succès", "type": "main", "index": 0}]]
    }
  },
  "settings": {"executionOrder": "v1"}
}